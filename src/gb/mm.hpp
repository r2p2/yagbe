#pragma once

#include "types.h"
#include "cartridge.hpp"

#include <array>

class MM
{
public:
  Error insert_rom(mem_t const& rom)
  {
    return _cr.load(rom);
  }

  Error load_ram(mem_t const& ram)
  {
    return _cr.load_ram(ram);
  }

  mem_t ram() const
  {
    return _cr.ram();
  }

  void power_on()
  {
    _cr.power_on();

    _verified = false;

    for (auto& mem : _mem)
      mem = 0x00;
  }

  bool is_rom_verified() const
  {
    return _verified;
  }

  void rom_verified()
  {
    _verified = true;
  }

  reg_t read(wide_reg_t addr) const
  {
    reg_t value = 0;

    if (addr >= 0xE000 and addr < 0xFE00) {
      addr -= 0x2000; // adjust for mirror ram
    }

    if (addr < 0x0100 and not _verified) {
      value = _dmg[addr];
    }
    else if (addr < 0x8000 or (addr >= 0xA000 and addr <= 0xBFFF)) {
      value = _cr.read(addr);
    }
    else {
      value = _mem[addr];
    }

    return value;
  }

  void write(wide_reg_t addr, reg_t value, bool internal = false)
  {
    if (not internal and addr == 0xFF04) { // DIV
      value = 0;
    }

    if (not internal and addr == 0xFF44) { // LY
      _mem[addr] = 0x00;
    }

    if (addr >= 0xE000 and addr < 0xFE00) {
      addr -= 0x2000; // adjust for mirror ram
    }

    if (addr == 0xFF46) { // DMA register
      wide_reg_t src = value << 8;
      for (reg_t i = 0; i < 40*4; ++i) {
        write(0xFE00 + i, read(src + i));
      }
    }

    if (addr < 0x0100 and not _verified) {
      // don't write
    }
    else if (addr < 0x8000 or (addr >= 0xA000 and addr <= 0xBFFF)) {
      _cr.write(addr, value);
    }
    else {
      _mem[addr] = value;
    }
  }

private:
  bool      _verified = false;
  Cartridge _cr;
  mem_t     _rom      = mem_t();
  mem_t     _mem      = mem_t(0xFFFF, static_cast<uint8_t>(0));

  std::array<reg_t, 0x100> const _dmg = {{
    0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb,
    0x21, 0x26, 0xff, 0x0e, 0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3,
    0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0, 0x47, 0x11, 0x04, 0x01,
    0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
    0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22,
    0x23, 0x05, 0x20, 0xf9, 0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99,
    0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20, 0xf9, 0x2e, 0x0f, 0x18,
    0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
    0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20,
    0xf7, 0x1d, 0x20, 0xf2, 0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62,
    0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06, 0x7b, 0xe2, 0x0c, 0x3e,
    0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
    0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17,
    0xc1, 0xcb, 0x11, 0x17, 0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9,
    0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b, 0x03, 0x73, 0x00, 0x83,
    0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e,
    0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63,
    0x6e, 0x0e, 0xec, 0xcc, 0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e,
    0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c, 0x21, 0x04, 0x01, 0x11,
    0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20,
    0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x20, 0xfe,
    0x3e, 0x01, 0xe0, 0x50
    }};
};
